# -*- coding: utf-8 -*-

import os
BASEDIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Bind port and interface (0.0.0.0 for all interfaces)
PORT = 8000
ADDRESS = "0.0.0.0"

# Debug mode
DEBUG = True

# Which hosts should be allowed when running in DEBUG=False mode
ALLOW_HOSTS = [
    'localhost'
]

# Local path for uploaded files
UPLOAD_LOCAL_PATH = os.path.join(BASEDIR, '/uploads')

# Public path for the files (Remember to add trailing slash)
UPLOAD_PUBLIC_PATH = '/uploads/'

# Old forum password salt
OLD_FORUM_SALT = ''

# Requirements for avatar
AVATAR_REQUIREMENTS = {
    'max_size': 5 * 1024 * 1024,  # Avatar max size when downloading, in bytes
    'max_input_width': 2048,  # Max input file width in pixels (bigger will error out)
    'max_input_height': 2048,  # Max input file height in pixels (bigger will error out)
    'connection_timeout': 0.5,  # In seconds, how long can connecting take
    'max_output_width': 300,  # If image is bigger than this in width, it will be resized
    'max_output_height': 300,  # If image is bigger than this in width, it will be resized
}

# Database configuration
# 1. psql -U postgres
# 2. CREATE USER aetherguild2 WITH PASSWORD '<my_password>';
# 3. CREATE DATABASE aetherguild2;
# 4. GRANT ALL PRIVILEGES ON DATABASE aetherguild2 to aetherguild2;
DATABASE_CONFIG = 'postgresql+psycopg2://<username>:<password>@localhost/aetherguild2'

# MQ Configuration
# 1. rabbitmqctl add_user <username> <password>
# 2. rabbitmqctl add_vhost aetherguild2
# 3. rabbitmqctl set_permissions -p aetherguild2 <username> ".*" ".*" ".*"
MQ_CONFIG = 'amqp://<username>:<password>@localhost:5672/aetherguild2/'

# Do not change unless you know what you are doing
PUBLIC_PATH = os.path.join(BASEDIR, "target")
MQ_EXCHANGE = '/exchange/direct'
MQ_TO_LISTENER = '/queue/to_listener'
MQ_FROM_LISTENER = '/queue/from_listener'

# Logging config
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '[%(asctime)s][%(levelname)s] %(message)s ',
            'datefmt': '%d.%m.%Y %I:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        }
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}
